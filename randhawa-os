#!/bin/bash
# RandhawaOS Management Script
# The universal, reproducible operating system

set -e

VERSION="1.0.0"
RANDHAWA_DIR="$HOME/.local/share/randhawa-os"
CONFIG_DIR="$HOME/.config/randhawa-os"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

logo() {
    echo -e "${PURPLE}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë"
    echo "‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë"
    echo "‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${CYAN}Universal ‚Ä¢ Reproducible ‚Ä¢ Future-Proof${NC}"
    echo -e "${YELLOW}Version $VERSION${NC}"
    echo ""
}

help() {
    echo "Usage: randhawa-os [COMMAND] [OPTIONS]"
    echo ""
    echo "Commands:"
    echo "  install         Install RandhawaOS on current system"
    echo "  update          Update system and packages"
    echo "  backup          Create system backup"
    echo "  restore         Restore from backup"
    echo "  snapshot        Manage system snapshots"
    echo "  export          Export system configuration"
    echo "  import          Import system configuration"
    echo "  container       Manage containers"
    echo "  migrate         Migrate to BTRFS filesystem"
    echo "  status          Show system status"
    echo "  config          Edit configuration"
    echo "  version         Show version information"
    echo "  help            Show this help message"
    echo ""
    echo "Examples:"
    echo "  randhawa-os install         # Install on current system"
    echo "  randhawa-os snapshot create # Create system snapshot"
    echo "  randhawa-os container build # Build all containers"
    echo "  randhawa-os export system   # Export system config"
    echo ""
}

status() {
    echo -e "${BLUE}üîç RandhawaOS System Status${NC}"
    echo ""
    
    # System info
    echo -e "${GREEN}System Information:${NC}"
    echo "  OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    echo "  Kernel: $(uname -r)"
    echo "  Hostname: $(hostname)"
    echo "  Uptime: $(uptime -p)"
    echo ""
    
    # Package counts
    echo -e "${GREEN}Package Status:${NC}"
    if command -v pacman &> /dev/null; then
        echo "  Total packages: $(pacman -Q | wc -l)"
        echo "  Explicit packages: $(pacman -Qe | wc -l)"
        echo "  AUR packages: $(pacman -Qm | wc -l)"
        echo "  Orphaned packages: $(pacman -Qtdq | wc -l)"
    fi
    echo ""
    
    # Services
    echo -e "${GREEN}Services:${NC}"
    echo "  Failed services: $(systemctl --failed | grep -c "loaded units listed" || echo "Some failed")"
    echo "  Active user services: $(systemctl --user list-units --state=active | grep -c "loaded units listed" || echo "Unknown")"
    echo ""
    
    # Disk usage
    echo -e "${GREEN}Disk Usage:${NC}"
    df -h | grep -E "^/dev" | head -3
    echo ""
    
    # RandhawaOS specific
    echo -e "${GREEN}RandhawaOS:${NC}"
    echo "  Installation: $([ -d "$RANDHAWA_DIR" ] && echo "Installed" || echo "Not installed")"
    echo "  Manifests: $([ -f "$RANDHAWA_DIR/system-manifest.json" ] && echo "Present" || echo "Missing")"
    echo "  Snapshots: $([ -d "$RANDHAWA_DIR/snapshots" ] && ls -1 "$RANDHAWA_DIR/snapshots" | wc -l || echo "0")"
    echo "  Containers: $([ -d "$RANDHAWA_DIR/containers" ] && echo "Configured" || echo "Not configured")"
    echo ""
}

install() {
    echo -e "${BLUE}üöÄ Installing RandhawaOS...${NC}"
    echo ""
    
    # Check if already installed
    if [ -d "$RANDHAWA_DIR" ] && [ -f "$RANDHAWA_DIR/system-manifest.json" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  RandhawaOS is already installed.${NC}"
        echo "Use 'randhawa-os update' to update the system."
        return 0
    fi
    
    # Run bootstrap script
    if [ -f "$RANDHAWA_DIR/bootstrap.sh" ]; then
        echo "üì¶ Running bootstrap script..."
        "$RANDHAWA_DIR/bootstrap.sh"
    else
        echo -e "${RED}‚ùå Bootstrap script not found!${NC}"
        echo "Please ensure RandhawaOS files are properly installed."
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ RandhawaOS installation completed!${NC}"
    echo ""
    echo "Next steps:"
    echo "1. Run: randhawa-os setup-nix"
    echo "2. Run: randhawa-os container build"
    echo "3. Create your first snapshot: randhawa-os snapshot create"
}

snapshot() {
    case "$2" in
        create)
            echo -e "${BLUE}üì∏ Creating system snapshot...${NC}"
            if [ -f "$RANDHAWA_DIR/snapshot.sh" ]; then
                "$RANDHAWA_DIR/snapshot.sh" create
            else
                echo -e "${RED}‚ùå Snapshot script not found!${NC}"
                return 1
            fi
            ;;
        list)
            echo -e "${BLUE}üìã Available snapshots:${NC}"
            if [ -f "$RANDHAWA_DIR/snapshot.sh" ]; then
                "$RANDHAWA_DIR/snapshot.sh" list
            else
                echo -e "${RED}‚ùå Snapshot script not found!${NC}"
                return 1
            fi
            ;;
        restore)
            if [ -z "$3" ]; then
                echo -e "${RED}‚ùå Please specify snapshot name${NC}"
                echo "Usage: randhawa-os snapshot restore <snapshot_name>"
                return 1
            fi
            echo -e "${BLUE}üîÑ Restoring snapshot: $3${NC}"
            if [ -f "$RANDHAWA_DIR/snapshot.sh" ]; then
                "$RANDHAWA_DIR/snapshot.sh" restore "$3"
            else
                echo -e "${RED}‚ùå Snapshot script not found!${NC}"
                return 1
            fi
            ;;
        *)
            echo "Usage: randhawa-os snapshot {create|list|restore <name>}"
            return 1
            ;;
    esac
}

container() {
    CONTAINERS_DIR="$RANDHAWA_DIR/containers"
    
    case "$2" in
        build)
            echo -e "${BLUE}üèóÔ∏è  Building containers...${NC}"
            if [ -f "$CONTAINERS_DIR/build.sh" ]; then
                cd "$CONTAINERS_DIR"
                ./build.sh
            else
                echo -e "${RED}‚ùå Container build script not found!${NC}"
                return 1
            fi
            ;;
        run)
            if [ -z "$3" ]; then
                echo -e "${RED}‚ùå Please specify container type${NC}"
                echo "Usage: randhawa-os container run {desktop|dev|stack}"
                return 1
            fi
            echo -e "${BLUE}üèÉ Running container: $3${NC}"
            if [ -f "$CONTAINERS_DIR/run.sh" ]; then
                cd "$CONTAINERS_DIR"
                ./run.sh "$3"
            else
                echo -e "${RED}‚ùå Container run script not found!${NC}"
                return 1
            fi
            ;;
        stop)
            echo -e "${BLUE}üõë Stopping containers...${NC}"
            if [ -f "$CONTAINERS_DIR/run.sh" ]; then
                cd "$CONTAINERS_DIR"
                ./run.sh stop
            else
                echo -e "${RED}‚ùå Container run script not found!${NC}"
                return 1
            fi
            ;;
        *)
            echo "Usage: randhawa-os container {build|run <type>|stop}"
            return 1
            ;;
    esac
}

export_config() {
    echo -e "${BLUE}üì§ Exporting system configuration...${NC}"
    
    EXPORT_FILE="$HOME/randhawa-os-export-$(date +%Y%m%d_%H%M%S).tar.gz"
    
    # Create temporary directory
    TEMP_DIR=$(mktemp -d)
    EXPORT_DIR="$TEMP_DIR/randhawa-os-export"
    
    mkdir -p "$EXPORT_DIR"
    
    # Copy RandhawaOS files
    if [ -d "$RANDHAWA_DIR" ]; then
        cp -r "$RANDHAWA_DIR" "$EXPORT_DIR/"
    fi
    
    # Copy important configs
    mkdir -p "$EXPORT_DIR/.config"
    for config in hypr waybar kitty rofi dunst; do
        if [ -d "$HOME/.config/$config" ]; then
            cp -r "$HOME/.config/$config" "$EXPORT_DIR/.config/"
        fi
    done
    
    # Export package lists
    if command -v pacman &> /dev/null; then
        pacman -Qe > "$EXPORT_DIR/packages-explicit.txt"
        pacman -Qm > "$EXPORT_DIR/packages-aur.txt"
    fi
    
    # Create tarball
    cd "$TEMP_DIR"
    tar czf "$EXPORT_FILE" randhawa-os-export/
    
    # Cleanup
    rm -rf "$TEMP_DIR"
    
    echo -e "${GREEN}‚úÖ Configuration exported to: $EXPORT_FILE${NC}"
}

main() {
    case "$1" in
        install)
            logo
            install
            ;;
        status)
            logo
            status
            ;;
        snapshot)
            snapshot "$@"
            ;;
        container)
            container "$@"
            ;;
        export)
            export_config
            ;;
        setup-nix)
            echo -e "${BLUE}‚ùÑÔ∏è  Setting up Nix...${NC}"
            if [ -f "$RANDHAWA_DIR/setup-nix.sh" ]; then
                "$RANDHAWA_DIR/setup-nix.sh"
            else
                echo -e "${RED}‚ùå Nix setup script not found!${NC}"
                return 1
            fi
            ;;
        migrate)
            echo -e "${BLUE}üîÑ Starting BTRFS migration...${NC}"
            if [ -f "$RANDHAWA_DIR/migrate-btrfs.sh" ]; then
                "$RANDHAWA_DIR/migrate-btrfs.sh"
            else
                echo -e "${RED}‚ùå BTRFS migration script not found!${NC}"
                return 1
            fi
            ;;
        version)
            logo
            ;;
        help|--help|-h)
            logo
            help
            ;;
        *)
            logo
            echo -e "${RED}‚ùå Unknown command: $1${NC}"
            echo ""
            help
            exit 1
            ;;
    esac
}

main "$@"